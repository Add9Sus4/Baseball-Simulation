<%= stylesheet_link_tag "jquery-ui.min", 'data-turbolinks-track' => true %>
<%= javascript_include_tag "jquery-ui.min", 'data-turbolinks-track' =>true %>
<%= javascript_include_tag 'bootstrap-sortable', 'data-turbolinks-track' => true %>
<%= javascript_include_tag 'moment.min', 'data-turbolinks-track' => true %>
<%= stylesheet_link_tag    'bootstrap-sortable', 'data-turbolinks-track' => true %>

<style>

.order {
  float: left;
  border-top: 4px solid #54708C;
  border-left: 4px solid #54708C;
  border-bottom: 4px solid #54708C;
}
.position_table {
  border-top: 4px solid #54708C;
  border-right: 4px solid #54708C;
  border-bottom: 4px solid #54708C;
}

.ui-sortable tr {
  cursor: move;
}

.dragging {
  background-color: #edf0f8;
  opacity: 0.5;
}

.ui-sortable-helper {
  background-color: #dae2f1;
  opacity: 1.0;
}

#lineup_changed {
  padding-top: 10px;
}

#roster_div {
  padding-top: 1px;
}

#position_div {
  padding-top: 3px;
  float: left;
  width: 250px;
}

#on_top_of_table {
  position: absolute;
  left: 20px;
  top: 225px;
}

.switchable {
  background-color: green !important;
}

.selected {
  background-color: red !important;
}

</style>
<span id="team_path" hidden><%= team_path(@team) %></span>
<div id="on_top_of_table" hidden>Player cannot be added to <br> multiple positions at once!</div>
<div id="position_div">
  </br>
  <h3>Positions</h3>
  <table id="position_name_table" class="multi-table order table-condensed table-striped table-bordered">
    <thead>
      <tr>
        <th>Pos.</th><th>Switch</th>
      </tr>
    </thead>
    <tbody>
      <tr><td>DH</td><td><button class="switch_position"></button></td></tr>
      <tr><td>C</td><td><button class="switch_position"></button></td></tr>
      <tr><td>1B</td><td><button class="switch_position"></button></td></tr>
      <tr><td>2B</td><td><button class="switch_position"></button></td></tr>
      <tr><td>3B</td><td><button class="switch_position"></button></td></tr>
      <tr><td>SS</td><td><button class="switch_position"></button></td></tr>
      <tr><td>RF</td><td><button class="switch_position"></button></td></tr>
      <tr><td>CF</td><td><button class="switch_position"></button></td></tr>
      <tr><td>LF</td><td><button class="switch_position"></button></td></tr>
    </tbody>
  </table>
  <table id="position_table" class="multi-table position_table table-condensed table-striped table-bordered">
    <thead>
      <tr>
        <th>Player</th>
      </tr>
    </thead>
    <tbody>
      <% @position_names = ['designated_hitter','catcher','first_base','second_base',
                            'third_base','shortstop','left_field','center_field','right_field'] %>
      <% for i in 0..8 do %>
        <tr>
          <td>
              <% if @team.find_player_at_position(i).is_a? Player %>
                <%= link_to @team.find_player_at_position(i).full_name, @team.find_player_at_position(i), method: :get %>
                <span class="hidden_position_id" hidden><%= @team.find_position_id(i) %></span>
                <span class="hidden_position_name" hidden><%= @position_names[i] %></span>
              <% else %>
                <%= '--' %>
                <span class="hidden_position_id" hidden><%= nil %></span>
                <span class="hidden_position_name" hidden><%= @position_names[i] %></span>
              <% end %>
            </td>
        </tr>
      <% end %>
    </tbody>
  </table>
</div>

<div id="roster_div">
  <h3>Roster</h3>
  <table class="table_with_custom_border roster sortable">
    <thead>
      <tr>
        <th>Name</th>
        <th>Age</th>
        <th>Height</th>
        <th>Weight</th>
        <th id="position_column_header" data-defaultsort="asc">Natural Position</th>
        <th>Salary</th>
      </tr>
    </thead>
    <tbody>
      <% @team.players.each do |player| %>
        <tr class="player_row">
          <td><%= link_to player.full_name, player, method: :get %><span "hidden_id" hidden><%= player.id %></span></td>
          <td><%= player.age %></td>
          <td class="height"><%= player.height %></td>
          <td><%= player.weight %> lb.</td>
          <td class="position"><%= player.position %></td>
          <td class="salary"><%= player.salary %></td>
        </tr>
      <% end %>
    </tbody>
  </table>
</div>

<script>

var first_id = null;
var second_id = null;
var first_position_name = null;
var second_position_name = null;

$(".switch_position").click(function(event) {
  // If you click on the selected button twice, it closes the option to switch positions
  if ($(event.target).closest("td").hasClass("selected")) {
    $(".switch_position").closest("td").removeClass("switchable").removeClass("selected");
    first_id = null;
    second_id = null;
    return;
  }
  var row = parseInt($(event.target).closest("tr").index()+1);
  var selected_position_id = $("#position_table tbody tr:nth-child(" + row + ") span.hidden_position_id").text();
  var selected_position_name = $("#position_table tbody tr:nth-child(" + row + ") span.hidden_position_name").text();
  second_id = first_id;
  second_position_name = first_position_name;
  first_id = selected_position_id;
  first_position_name = selected_position_name;

  if (first_id !== null && second_id !== null) {
    console.log("first id: " + first_id + ", second id: " + second_id);
    console.log("first position: " + first_position_name + ", second position: " + second_position_name);
    var positionData = { };
    positionData[first_position_name] = parseInt(second_id);
    positionData[second_position_name] = parseInt(first_id);
    var teamData = { };
    teamData["team"] = positionData;
    $.ajax({
      url: $("#team_path").text(),
      type: 'PATCH',
      dataType: 'json',
      data: teamData,
    });
    location.reload();
  }
  // Otherwise, proceed
  $(".switch_position").closest("td").addClass("switchable").removeClass("selected");
  $(event.target).closest("td").removeClass("switchable");
  $(event.target).closest("td").addClass("selected");
});

function checkIfPlayerHasPositionOnTeam(player_id) {
  ids = $(".hidden_position_id").map( function() {
    return $(this).text();
  });
  var i;
  for (i=0; i<ids.length; i++) {
    if (ids[i] === player_id) {
      return true;
    }
  }
  return false;
}

$('.position').each(function() {
  var positionSymbol = $(this).text();
  var position = '';
  switch (positionSymbol.toLowerCase()) {
    case 'p':
      $(this).attr('data-value',1);
      position = 'Pitcher';
      break;
    case 'c':
    $(this).attr('data-value',2);
      position = 'Catcher';
      break;
    case '1b':
      $(this).attr('data-value',3);
      position = 'First Base';
      break;
    case '2b':
      $(this).attr('data-value',4);
      position = 'Second Base';
      break;
    case '3b':
      $(this).attr('data-value',5);
      position = 'Third Base';
      break;
    case 'ss':
      $(this).attr('data-value',6);
      position = 'Shortstop';
      break;
    case 'lf':
      $(this).attr('data-value',7);
      position = 'Left Field';
      break;
    case 'cf':
      $(this).attr('data-value',8);
      position = 'Center Field';
      break;
    case 'rf':
      $(this).attr('data-value',9);
      position = 'Right Field';
      break;
  }
  $(this).text(position);
});

$('.height').each(function() {
  var height = $(this).text();
  var feet = Math.floor(Number(height)/12);
  var inches = Number(height) - feet*12;
  var text = $(this).text();
  $(this).text(feet + '\' ' + inches + '\"');
  $(this).attr('data-value', height);
});

$('.salary').each(function() {
  var item = $(this).text();
  var num = Number(item).toLocaleString('en');

  if(Number(item) < 0) {
    num = num.replace('-','');
    $(this).addClass('negMoney');
  } else {
    $(this).addClass('enMoney');
  }
  $(this).text(num);
});

$('.salary').each(function() {
  $(this).attr('data-value', salaryToInteger($(this).text()));
});

function salaryToInteger(salary) {
  var condensedSalary = salary.replace(/[$,.]/g,''); // Get rid of dollar signs and commas
  return parseInt(condensedSalary);
}

$(".dragging").each(function() {
  $(this).css('opacity', '0.5');
});

$(document).ready(function() {

  var fixHelperModified = function(e, tr) {
    var $originals = tr.children();
    var $helper = tr.clone();
    $helper.children().each(function(index) {
      $(this).width($originals.eq(index).width());
    });
    return $helper;
  };

  $(".roster tbody tr").draggable({
    helper: 'clone',
    delay: 150,
    revert: true,

    start: function(event, ui) {
      $(this).toggleClass('dragging');
      console.log("I am dragging " + $(this).find("span").text());
      console.log("Player has position? " + checkIfPlayerHasPositionOnTeam($(this).find("span").text()));
      if (checkIfPlayerHasPositionOnTeam($(this).find("span").text())) {
        $("#position_table tbody tr").droppable("option", "disabled", true);
        $("#position_table, #position_name_table").css("opacity", "0.2");
        $("#on_top_of_table").show();
      }
    },
    stop: function(event, ui) {
      $(this).toggleClass('dragging');
      $("#position_table tbody tr").droppable("option", "disabled", false);
      $("#position_table, #position_name_table").css("opacity", "1.0");
      $("#on_top_of_table").hide();
    },
    // containment: "#roster_div",
  }).disableSelection();

  $("#position_table tbody tr").droppable({
    drop: function(event, ui) {
      var player = ui.draggable.find("span");
      var slot = $(this).find("span.hidden_position_name");
      console.log("I have dropped player " + player.text() + " in slot " + slot.text());

      var lineupData = { };
      lineupData[slot.text()] = parseInt(player.text());
      var teamData = { };
      teamData["team"] = lineupData;
      $.ajax({
        url: $("#team_path").text(),
        type: 'PATCH',
        dataType: 'json',
        data: teamData,
      });
      if (player.closest("div").is("#roster_div")) {
        location.reload();
      }
    },
  });

});
</script>
